{"version":3,"sources":["../webpack/bootstrap","worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isPrime","x","Math","sqrt","findHighestPrime","Error","highestPrime"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,qBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,mBAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BC/ErD,SAASC,EAAQC,GACf,GAAIA,EAAI,EACN,OAAO,EAGT,IAAK,IAAIjC,EAAI,EAAGA,GAAKkC,KAAKC,KAAKF,GAAIjC,IACjC,GAAIiC,EAAIjC,IAAM,EACZ,OAAO,EAGX,OAAO,EAGF,SAASoC,EAAiBX,GAC/B,GAAIA,EAAI,EACN,MAAM,IAAIY,MAAM,uCAGlB,GAAIZ,GAAK,KAEP,MAAM,IAAIY,MAAM,kDAIlB,IAFA,IAAIC,EAAe,EAEVtC,EAAIyB,EAAI,EAAGzB,EAAI,EAAGA,IACzB,GAAIgC,EAAQhC,GAAI,CACdsC,EAAetC,EACf,MAGJ,OAAOsC,EAjCT,wD","file":"14e4c1018319a65b3c49.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/stably-project/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Sieve is commented out, rather than deleted.\n\n// optimization 7\nfunction isPrime(x: number): boolean {\n  if (x < 2) {\n    return false;\n  }\n\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function findHighestPrime(n: number): number {\n  if (n < 2) {\n    throw new Error('Input number must be greater than 2');\n  }\n\n  if (n >= 1e16) {\n    // throw errors for inputs from 10 quadrillion and above because arithmetic operations are inconsistent for numbers above 9 quadrillion\n    throw new Error('Input number should not exceed 10 quadrillion!');\n  }\n  let highestPrime = 0;\n\n  for (let i = n - 2; i > 2; i--) {\n    if (isPrime(i)) {\n      highestPrime = i;\n      break;\n    }\n  }\n  return highestPrime;\n}\n\n// // see optimization details in readME\n// function simpleSieve(n: number): number[] {\n//   // optimization 1:\n//   const primes = new Int8Array(n);\n//   const results: number[] = [];\n\n//   primes[0] = 1;\n//   primes[1] = 1;\n\n//   for (let i = 0; i <= Math.sqrt(n); i++) {\n//     // optimization 2\n//     if (primes[i] === 0) {\n//       // optimization 3\n//       const multiplesOfI = i * i;\n//       // optimization 4\n//       for (let j = multiplesOfI; j <= n; j += i) {\n//         primes[j] = 1;\n//       }\n//     }\n//   }\n\n//   for (let i = 0; i <= primes.length; i++) {\n//     if (primes[i] === 0) {\n//       results.push(i);\n//     }\n//   }\n\n//   return results;\n// }\n\n// // optimization 6\n// export function findHighestPrime(n: number): number {\n//   if (n < 2) {\n//     throw new Error('Input number must be greater than 2');\n//   }\n//   const primes = [];\n//   let highestPrime = 0;\n\n//   // add 1 to range so that very small numbers <= 10 would play nicely\n//   // for the first prime\n//   const range = Math.floor(Math.sqrt(n)) + 1;\n\n//   // compute primes up to sqrt of n\n//   primes.push(...simpleSieve(range));\n\n//   let lowerLimit = range;\n//   let upperLimit = range * 2;\n\n//   while (lowerLimit < n) {\n//     // keep upperLimit one number lower than n\n//     if (upperLimit >= n) {\n//       upperLimit = n - 1;\n//     }\n\n//     const currentNumbers = new Int8Array(range);\n\n//     for (let i = 0; i < primes.length; i++) {\n//       const prime = primes[i];\n\n//       // find minimum multiple of prime (aka, divisible by prime) in current range\n//       let minMulOfPrime = Math.floor(lowerLimit / prime) * prime;\n\n//       if (minMulOfPrime < lowerLimit) {\n//         // keep minimum multiple in current range by shifting to the next multiple is below range\n//         minMulOfPrime += prime;\n//       }\n\n//       // mark multiples of prime in range\n//       for (let j = minMulOfPrime; j <= upperLimit; j += prime) {\n//         const indexInRange = j - lowerLimit;\n//         currentNumbers[indexInRange] = 1;\n//       }\n//     }\n\n//     // loop through primes in range and update highest prime\n//     for (let i = lowerLimit; i <= upperLimit; i++) {\n//       // since currentNumbers is a slice of length low - high\n//       // get number index in range by subtracting index from low\n//       const numIndexInRange = i - lowerLimit;\n//       if (currentNumbers[numIndexInRange] === 0) {\n//         highestPrime = i;\n//       }\n//     }\n\n//     // update low and high for next segment\n//     lowerLimit += range;\n//     upperLimit += range;\n//   }\n\n//   return highestPrime;\n// }\n"],"sourceRoot":""}